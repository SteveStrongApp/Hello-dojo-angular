AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This stack deploys a Fargate cluster that is in a VPC with both public and private subnets. There is one public loadbalancer.
  It also deploys a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:
  ServiceName:
    Type: String
  VpcId:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  ExposedPort:
    Type: Number
    Default: 80
    Description: The port exposed to the public


Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ServiceName}-alb
      VpcId: !Ref VpcId

  SecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  SecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups: [!Ref PublicLoadBalancerSecurityGroup]


  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref ServiceName, 'drop-1']]
      Port: !Ref ExposedPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: 'forward'
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref 'ExposedPort'
      Protocol: HTTP

Outputs:
  ServiceUrl:
    Description: URL of the load balancer for the service.
    Value: !Sub ${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup

  LoadBalancerArn:
    Value: !Ref LoadBalancer

  LoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener
